{"ast":null,"code":"import actionTypes from '../constants/actionTypes';\nimport runtimeEnv from '@mars/heroku-js-runtime-env';\n\nfunction userLoggedIn(username) {\n  return {\n    type: actionTypes.USER_LOGGEDIN,\n    username: username\n  };\n}\n\nfunction logout() {\n  return {\n    type: actionTypes.USER_LOGOUT\n  };\n}\n\nexport function submitLogin(data) {\n  const env = runtimeEnv();\n  return dispatch => {\n    return fetch(`${env.REACT_APP_API_URL}/signin`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n      mode: 'cors'\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(res => {\n      localStorage.setItem('username', data.username);\n      localStorage.setItem('token', res.token);\n      dispatch(userLoggedIn(data.username));\n    }).catch(e => console.log(e));\n  };\n}\nexport function submitRegister(data) {\n  const env = runtimeEnv();\n  return dispatch => {\n    return fetch(`${env.REACT_APP_API_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n      mode: 'cors'\n    }).then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(res => {\n      dispatch(submitLogin(data));\n    }).catch(e => console.log(e));\n  };\n}\nexport function logoutUser() {\n  return dispatch => {\n    localStorage.removeItem('username');\n    localStorage.removeItem('token');\n    dispatch(logout());\n  };\n}","map":{"version":3,"sources":["C:/Users/mario/OneDrive/Documents/GitHub/projectApp/src/actions/authActions.js"],"names":["actionTypes","runtimeEnv","userLoggedIn","username","type","USER_LOGGEDIN","logout","USER_LOGOUT","submitLogin","data","env","dispatch","fetch","REACT_APP_API_URL","method","headers","body","JSON","stringify","mode","then","response","ok","Error","statusText","json","res","localStorage","setItem","token","catch","e","console","log","submitRegister","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,aADf;AAEHF,IAAAA,QAAQ,EAAEA;AAFP,GAAP;AAIH;;AAED,SAASG,MAAT,GAAkB;AACd,SAAO;AACHF,IAAAA,IAAI,EAAEJ,WAAW,CAACO;AADf,GAAP;AAGH;;AAED,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAC9B,QAAMC,GAAG,GAAGT,UAAU,EAAtB;AACA,SAAOU,QAAQ,IAAI;AACf,WAAOC,KAAK,CAAE,GAAEF,GAAG,CAACG,iBAAkB,SAA1B,EAAoC;AAC5CC,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAFmC;AAM5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CANsC;AAO5CU,MAAAA,IAAI,EAAE;AAPsC,KAApC,CAAL,CAQJC,IARI,CAQEC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,cAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KAbM,EAaJL,IAbI,CAaEM,GAAD,IAAS;AACbC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCnB,IAAI,CAACN,QAAtC;AACAwB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,GAAG,CAACG,KAAlC;AAEAlB,MAAAA,QAAQ,CAACT,YAAY,CAACO,IAAI,CAACN,QAAN,CAAb,CAAR;AACH,KAlBM,EAkBJ2B,KAlBI,CAkBGC,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAlBT,CAAP;AAmBH,GApBD;AAqBH;AAED,OAAO,SAASG,cAAT,CAAwBzB,IAAxB,EAA8B;AACjC,QAAMC,GAAG,GAAGT,UAAU,EAAtB;AACA,SAAOU,QAAQ,IAAI;AACf,WAAOC,KAAK,CAAE,GAAEF,GAAG,CAACG,iBAAkB,SAA1B,EAAoC;AAC5CC,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAFmC;AAM5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CANsC;AAO5CU,MAAAA,IAAI,EAAE;AAPsC,KAApC,CAAL,CAQJC,IARI,CAQEC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,cAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KAbM,EAaJL,IAbI,CAaEM,GAAD,IAAS;AACbf,MAAAA,QAAQ,CAACH,WAAW,CAACC,IAAD,CAAZ,CAAR;AACH,KAfM,EAeJqB,KAfI,CAeGC,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAfT,CAAP;AAgBH,GAjBD;AAkBH;AAED,OAAO,SAASI,UAAT,GAAsB;AACzB,SAAOxB,QAAQ,IAAI;AACfgB,IAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAT,IAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACAzB,IAAAA,QAAQ,CAACL,MAAM,EAAP,CAAR;AACH,GAJD;AAKH","sourcesContent":["import actionTypes from '../constants/actionTypes';\r\nimport runtimeEnv from '@mars/heroku-js-runtime-env'\r\n\r\nfunction userLoggedIn(username) {\r\n    return {\r\n        type: actionTypes.USER_LOGGEDIN,\r\n        username: username\r\n    }\r\n}\r\n\r\nfunction logout() {\r\n    return {\r\n        type: actionTypes.USER_LOGOUT\r\n    }\r\n}\r\n\r\nexport function submitLogin(data) {\r\n    const env = runtimeEnv();\r\n    return dispatch => {\r\n        return fetch(`${env.REACT_APP_API_URL}/signin`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data),\r\n            mode: 'cors'\r\n        }).then((response) => {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n            return response.json()\r\n        }).then((res) => {\r\n            localStorage.setItem('username', data.username);\r\n            localStorage.setItem('token', res.token);\r\n\r\n            dispatch(userLoggedIn(data.username));\r\n        }).catch((e) => console.log(e));\r\n    }\r\n}\r\n\r\nexport function submitRegister(data) {\r\n    const env = runtimeEnv();\r\n    return dispatch => {\r\n        return fetch(`${env.REACT_APP_API_URL}/signup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data),\r\n            mode: 'cors'\r\n        }).then((response) => {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n            return response.json()\r\n        }).then((res) => {\r\n            dispatch(submitLogin(data));\r\n        }).catch((e) => console.log(e));\r\n    }\r\n}\r\n\r\nexport function logoutUser() {\r\n    return dispatch => {\r\n        localStorage.removeItem('username');\r\n        localStorage.removeItem('token');\r\n        dispatch(logout())\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}